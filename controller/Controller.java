/**
 *
 * @author Umar
 * @autoh Viktor
 * This class represents a control system for the GUI and makes the needed changes to it
 */
package umarviktor.controller;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import umarviktor.model.*;
import umarviktor.view.*;

public class Controller {
    private Fantasy fantasy;
    private Squad squad;
    
    /**
     * Class constructor. Creates a controller for the GUI
     */
    public Controller(Fantasy fantasy, Squad squad) {
        this.fantasy = fantasy;
        this.squad = squad;
        /**
         * creates a new ActionListener for the ComboBox and executes the action method when needed
         */
        fantasy.addActionforBox(new ActionListener() {			//action listener for the ComboBox
            @Override
            public void actionPerformed(ActionEvent e) {
                action();
            }
        });

    }
    /**
     * Triggers when something (which is not the "Select information" option) is selected in the combo box and distributes the players on the pitch and the bench
     */
    public void action() {        							    //triggers when something is selected
    	if (fantasy.getSelectedItem()!="Select formation") {    //used so it doesn't do anything if the "Select formation" option is chosen"
        String[] formation = fantasy.getSelectedItem().split("-"); //gets the relevant information for the formation chosen (number of people on each role)
        fantasy.clear(); // clears all the components in the pitch panel and the bench

        for (Player player : squad.getTeam()) {
            if (player instanceof GoalKeeper) {           
                fantasy.addPlayerAtGoal(player.getID(), player.getPath(), player.getName());
                actionButton();// adds the action button for that specific button that was created for Goalkeeper
                
                actionField();  // adds the action for the text field that was generated by that specific Goalkeeper
            } 
            else if (player instanceof Striker) {
                fantasy.addPlayerAtStike(player.getID(), player.getPath(), player.getName(), Integer.valueOf(formation[2]));
                actionButton();
                actionField();
            } 
            else if (player instanceof Defender) {
                fantasy.addPlayerAtDef(player.getID(), player.getPath(), player.getName(), Integer.valueOf(formation[0]));
                actionButton();
                actionField();
            } 
            else if (player instanceof MidFielder) {
                fantasy.addPlayerAtMid(player.getID(), player.getPath(), player.getName(), Integer.valueOf(formation[1]));
                actionButton(); // adds the action button for that specific button that was created for midfielder
                actionField(); // adds the action for the text field that was generated by that specific midfielder
            }

            fantasy.repaint();
            fantasy.revalidate();
        }
    	}
    }

    /**
     * Creates an action listener for the button used to add an image. Locates which container the button belongs to then opens a file chooser for the user to choose an image for the player.
     * Upon choosing and image, assigns that image to the button and disables it and also changes the text in text field to the name of the player whose image is chosen.
     */
    public void actionButton() {

        fantasy.addActionForButton(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                // the source of the event located to extract the id
                JButton button = (JButton) e.getSource();
                JPanel panel = (JPanel) button.getParent(); // the container that this button belongs too
                
                JTextField field = (JTextField) panel.getComponent(1); // the jtext field retrived from the panel -- the index is at 1 because it is the second component to be added

                int id = Integer.valueOf(button.getName());

                JFileChooser jf = new JFileChooser();
                // Relative directory created
                File workingDirectory = new File(System.getProperty("user.dir"));
                jf.setCurrentDirectory(workingDirectory);

                jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

               if (jf.showOpenDialog(button) == JFileChooser.APPROVE_OPTION) {

                }
                
                if (jf.getSelectedFile() != null) {
                    
                    File file = jf.getSelectedFile();
                    String sub = file.getName().substring(0, file.getName().lastIndexOf('.')); // the file selected will have an extension-- this is to remove the extension from the file name
                    String actualName = sub.substring(0, 1).toUpperCase() + sub.substring(1); // turns the first character of the file name to upperacase
                    field.setText(actualName);
                    
                    squad.search(id).setPath(jf.getSelectedFile().getAbsolutePath()); // sets the path that was selected to the player that matched the id of the source event
                    
                    squad.search(id).setName(actualName); // sets the name when the image is added
                    
                    fantasy.setImageOnButton(button, jf.getSelectedFile().getAbsolutePath()); //sets the image on the button
                }

            }
        });

    }
/**
 * creates an action listener for the text field and calls the documentEvent method on change.
 */
    public void actionField() {
        fantasy.addActionForNameField(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {

                documentEvent(e);

            }

            @Override
            public void removeUpdate(DocumentEvent e) {

                documentEvent(e);

            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });

    }
/**
 * finds which text field is modified and changes the name of the according player to the value of the text field
 * @param e observes the changes to the specific textfield
 */
    public void documentEvent(DocumentEvent e) {
        JTextField field = (JTextField) e.getDocument().getProperty("Key"); // everytime a text field is modified the source of the event is found by calling the property (i.e. the "key")
        int id = Integer.valueOf(field.getName());
        squad.search(id).setName(field.getText());  // searches to the player with id that matched the fields name and changes his name accordingly
    }
}
